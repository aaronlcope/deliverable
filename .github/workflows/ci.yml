name: ci

on: 
  pull_request:
  push:
    branches:
      - master
    tags: 
      - v[0-9]+.[0-9]+.[0-9]+
jobs:
    
    ci:
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@master

      - name: Setup .NET Core
        uses: actions/setup-dotnet@master
        with:
          dotnet-version: 3.1.102

      - name: Setup NuGet.exe for use with actions
        uses: NuGet/setup-nuget@master

      - name: Create nuget config file
        run: ./scripts/nuget-config.sh --packaging-auth-token ${{ secrets.PACKAGE_TOKEN }} --path-to-nuget-file ./src/NuGet.config

      - name: Run CI script
        run: ./scripts/ci.sh --skip-unit-tests --skip-sonar-cloud-analysis --skip-nuget-packaging
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REF: ${{ github.ref }}
          GITHUB_EVENT_PATH: ${ GITHUB_EVENT_PATH }

      - name: Publish application for distribution (windows).
        run: |
         dotnet publish ./src/*.csproj -c Release -r win-x64
         zip -rj win-x64.zip "$(pwd)/src/bin/Release/netcoreapp3.1/win-x64/publish"
         
      - name: Publish application for distribution (linux).
        run: |
         dotnet publish ./src/*.csproj -c Release -r linux-x64
         zip -rj linux-x64.zip "$(pwd)/src/bin/Release/netcoreapp3.1/linux-x64/publish"

      - name: Publish application for distribution (osx).
        run: |
         dotnet publish ./src/*.csproj -c Release -r osx-x64
         zip -rj osx-x64.zip "$(pwd)/src/bin/Release/netcoreapp3.1/osx-x64/publish"

      - name: Upload build artifact (windows)
        uses: actions/upload-artifact@master
        with:
            name: windows-x64
            path: "./win-x64.zip"

      - name: Upload build artifact (linux)
        uses: actions/upload-artifact@master
        with:
            name: linux-x64
            path: "./linux-x64.zip"

      - name: Upload build artifact (osx)
        uses: actions/upload-artifact@master
        with:
            name: osx-x64
            path: "./osx-x64.zip"

    release:
      needs: ci
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@master

      - name: Download distributable (windows)
        uses: actions/download-artifact@master
        if: startsWith(github.ref, 'refs/tags/')
        with: 
          name: windows-x64
          path: "./win-x64.zip"
    
      - name: Download distributable (linux)
        uses: actions/download-artifact@master
        if: startsWith(github.ref, 'refs/tags/')
        with: 
          name: linux-x64
          path: "./linux-x64.zip"

      - name: Download distributable (osx)
        uses: actions/download-artifact@master
        if: startsWith(github.ref, 'refs/tags/')
        with: 
          name: osx-x64
          path: "./osx-x64.zip"

      - name: Install npm.
        uses: actions/setup-node@master
        if: startsWith(github.ref, 'refs/tags/')
        with:
          node-version: '13.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Create Release notes
        if: startsWith(github.ref, 'refs/tags/')
        run : |
         npm install github-release-notes -g
         export GREN_GITHUB_TOKEN=${{ secrets.GREN }}
         gren changelog --generate
         ls -al

      - name: Create release with assets
        uses: softprops/action-gh-release@master
        if: startsWith(github.ref, 'refs/tags/')
        with:
          draft: false
          prerelease: false
          body_path: CHANGELOG.md
          files: |
           ./win-x64.zip
           ./linux-x64.zip
           ./osx-x64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}