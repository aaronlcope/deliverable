name: ci

on: 
  push:
    branches:
      - master
    
jobs:
    
    ci:
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@master

      - name: Setup .NET Core
        uses: actions/setup-dotnet@master
        with:
          dotnet-version: 3.1.102

      - name: Setup NuGet.exe for use with actions
        uses: NuGet/setup-nuget@master

      - name: Create nuget config file
        run: ./scripts/nuget-config.sh --packaging-auth-token ${{ secrets.PACKAGE_TOKEN }} --path-to-nuget-file ./src/NuGet.config

      - name: Run CI script
        run: ./scripts/ci.sh --skip-unit-tests --skip-sonar-cloud-analysis --skip-nuget-packaging
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REF: ${{ github.ref }}
          GITHUB_EVENT_PATH: ${ GITHUB_EVENT_PATH }

      - name: Publish application for distribution (windows).
        run: |
         dotnet publish ./src/*.csproj -c Release -r win-x64
         zip -rj win-x64.zip "$(pwd)/src/bin/Release/netcoreapp3.1/win-x64/publish"
         
      - name: Publish application for distribution (linux).
        run: |
         dotnet publish ./src/*.csproj -c Release -r linux-x64
         zip -rj linux-x64.zip "$(pwd)/src/bin/Release/netcoreapp3.1/linux-x64/publish"

      - name: Publish application for distribution (osx).
        run: |
         dotnet publish ./src/*.csproj -c Release -r osx-x64
         zip -rj osx-x64.zip "$(pwd)/src/bin/Release/netcoreapp3.1/osx-x64/publish"

      - name: Upload build artifact (windows)
        uses: actions/upload-artifact@v1
        with:
            name: windows-x64
            path: "./win-x64.zip"

      - name: Upload build artifact (linux)
        uses: actions/upload-artifact@v1
        with:
            name: linux-x64
            path: "./linux-x64.zip"

      - name: Upload build artifact (osx)
        uses: actions/upload-artifact@v1
        with:
            name: osx-x64
            path: "./osx-x64.zip"

    release:
      needs: ci
      runs-on: ubuntu-latest
      steps:

      - name: Download distributable (windows)
        uses: actions/download-artifacts@v1
        with: 
          name: windows-x64
    
      - name: Download distributable (linux)
        uses: actions/download-artifacts@v1
        with: 
          name: linux-x64

      - name: Download distributable (osx)
        uses: actions/download-artifacts@v1
        with: 
          name: osx-x64

      - name: Ensure distributables are there
        run: |
         cd assets
         pwd
         ls -al

      # - name: Create release
      #   if: startsWith(github.ref, 'refs/tags/')
      #   id: create_release
      #   uses: actions/create-release@master
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: ${{ github.ref }}
      #     release_name: Release ${{ github.ref }}
      #     draft: false
      #     prerelease: false

      # - name: Upload release asset (windows)
      #   if: startsWith(github.ref, 'refs/tags/')
      #   id: upload-windows-release-asset 
      #   uses: actions/upload-release-asset@master
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
      #     asset_path: ./assets/
      #     asset_name: windows-x64.zip
      #     asset_content_type: application/zip

      # - name: Upload release asset (linux)
      #   if: startsWith(github.ref, 'refs/tags/')
      #   id: upload-linux-release-asset 
      #   uses: actions/upload-release-asset@master
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
      #     asset_path: ./assets/
      #     asset_name: linux-x64.zip
      #     asset_content_type: application/zip

      # - name: Upload release asset (osx)
      #   if: startsWith(github.ref, 'refs/tags/')
      #   id: upload-osx-release-asset 
      #   uses: actions/upload-release-asset@master
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
      #     asset_path: ./assets/
      #     asset_name: osx-x64.zip
      #     asset_content_type: application/zip